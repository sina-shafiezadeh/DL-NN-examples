# -*- coding: utf-8 -*-
"""homework_3_reinforcement_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lr4KvTBJ7SLtgYPMORt0KEKx4Pj4zC98
"""

!pip install cmake 'gym[atari]' scipy
!pip install gym[toy_text]

import gym

env = gym.make("Taxi-v3",new_step_api=True).env
env.reset()
import os
os.environ["SDL_VIDEODRIVER"] = "dummy"
env.render()

env.reset() # reset environment to a new, random state
env.render()

print("Action Space {}".format(env.action_space))
print("State Space {}".format(env.observation_space))

state = env.encode(3, 1, 2, 0) # (taxi row, taxi column, passenger index, destination index)
print("State:", state)

env.s = state
env.render()

env.P[328]

import numpy as np
q_table = np.zeros([env.observation_space.n, env.action_space.n])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# """Training the agent"""
# 
# import random
# from IPython.display import clear_output
# 
# # Hyperparameters
# alpha = 0.1
# gamma = 0.6
# epsilon = 0.1
# 
# # For plotting metrics
# all_epochs = []
# all_penalties = []
# 
# for i in range(1, 100001):
#     state = env.reset()
# 
#     epochs, penalties, reward, = 0, 0, 0
#     done = False
#     
#     while not done:
#         if random.uniform(0, 1) < epsilon:
#             action = env.action_space.sample() # Explore action space
#         else:
#             action = np.argmax(q_table[state]) # Exploit learned values
# 
#         next_state, reward, done, info, _ = env.step(action)
# 
#         old_value = q_table[state, action]
#         next_max = np.max(q_table[next_state])
#         
#         new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)
#         q_table[state, action] = new_value
# 
#         if reward == -10:
#             penalties += 1
# 
#         state = next_state
#         epochs += 1
#         
#     if i % 100 == 0:
#         clear_output(wait=True)
#         print(f"Episode: {i}")
# 
# print("Training finished.\n")

q_table[328]

"""Evaluate agent's performance after Q-learning"""

total_epochs, total_penalties = 0, 0
episodes = 100

for _ in range(episodes):
    state = env.reset()
    epochs, penalties, reward = 0, 0, 0
    
    done = False
    
    while not done:
        action = np.argmax(q_table[state])
        state, reward, done, info, _ = env.step(action)

        if reward == -10:
            penalties += 1

        epochs += 1

    total_penalties += penalties
    total_epochs += epochs

print(f"Results after {episodes} episodes:")
print(f"Average timesteps per episode: {total_epochs / episodes}")
print(f"Average penalties per episode: {total_penalties / episodes}")